generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id @default(cuid())
  email              String    @unique
  password           String
  phoneNumber        String?
  role               UserRole  @default(USER)
  source             Source    @default(OTHER)
  passwordResetToken String?
  passwordResetAt    DateTime?

  employees     Employee[]
  organizations Organization[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  USER
  ADMIN
  OWNER
}

enum Source {
  FACEBOOK
  TWITTER
  INSTAGRAM
  LINKEDIN
  GOOGLE
  OTHER
}

model Organization {
  id          String       @id @default(cuid())
  name        String       @unique
  logo        String?
  address     String?
  inviteCode  String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  employees   Employee[]
  forms       Form[]
  invite      Invite[]
  projects    Project[]
  reports     Report[]
  submissions Submission[]

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, name])
}

model Employee {
  id                  String                       @id @default(cuid())
  fullName            String?
  email               String?
  contactNumber       String?
  address             String?
  avatar              String?
  role                EmployeeRole                 @default(MEMBER)
  userId              String
  organizationId      String
  createdAt           DateTime                     @default(now())
  updatedAt           DateTime                     @updatedAt
  organization        Organization                 @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user                User                         @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectAssociations EmployeeProjectAssociation[]
  forms               Form[]
  reports             Report[]
  submissions         Submission[]
  invite              Invite[]

  @@index([userId, organizationId])
}

model Invite {
  id             String       @id @default(uuid())
  token          String
  email          String
  inviteCode     String?
  role           EmployeeRole @default(MEMBER)
  expirationDate DateTime
  organizationId String
  employeeId     String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  employee       Employee     @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("Invite")
}

model Project {
  id                  String                       @id @default(uuid())
  name                String
  description         String
  expectedDuration    String
  status              String
  isCompleted         Boolean                      @default(false)
  startDate           DateTime
  endDate             DateTime
  organizationId      String
  createdAt           DateTime                     @default(now())
  updatedAt           DateTime                     @updatedAt
  projectAssociations EmployeeProjectAssociation[]
  forms               Form[]
  organization        Organization                 @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  reports             Report[]
  submissions         Submission[]

  @@index([organizationId])
}

model EmployeeProjectAssociation {
  id         String   @id @default(uuid())
  employeeId String
  projectId  String
  role       String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([employeeId, projectId])
}

model Form {
  id             String       @id @default(uuid())
  title          String
  formData       String
  description    String
  creatorId      String
  organizationId String
  projectId      String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  employee       Employee     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  project        Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  reports        Report[]
  submissions    Submission[]

  @@index([projectId, creatorId, organizationId])
}

model Submission {
  id             String  @id @default(uuid())
  title          String
  description    String
  submissionData String
  geolocation    String?

  creatorId      String
  employee       Employee @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  organizationId String
  formId         String
  projectId      String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  reports        Report[]
  form           Form         @relation(fields: [formId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  project        Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([formId, projectId, creatorId, organizationId])
}

model Report {
  id             String       @id @default(uuid())
  title          String
  reportData     String
  creatorId      String
  organizationId String
  formId         String
  submissionId   String
  projectId      String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  employee       Employee     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  form           Form         @relation(fields: [formId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  project        Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  submission     Submission   @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([formId, projectId, creatorId, submissionId, organizationId])
}

enum EmployeeRole {
  OWNER
  ADMIN
  MEMBER
  GUEST
}

model Audit {
  id            String   @id @default(uuid())
  userMail      String
  userIpAddress String?
  orgId         String
  type          String
  tableName     String
  dateTime      DateTime @default(now())
  oldValues     String
  newValues     String
  primaryKey    String
}
