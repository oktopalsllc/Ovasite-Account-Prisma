// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  password      String
  organizations Organization[]
  employees     Employee[]
  teams         Team[]
  invite        Invite[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Organization {
  id         String  @id @default(cuid())
  name       String  @unique
  logo       String?
  address    String?
  inviteCode String  @unique

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  employees   Employee[]
  teams       Team[]
  invite      Invite[]
  projects    Project[]
  forms       Form[]
  submissions Submission[]
  reports     Report[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, name])
}

enum EmployeeRole {
  OWNER
  ADMIN
  MEMBER
  GUEST
}

model Employee {
  id            String  @id @default(cuid())
  fullName      String?
  email         String?
  contactNumber String?
  address       String?
  avatar         String?

  role   EmployeeRole @default(MEMBER)
  userId String
  user   User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  projectAssociations EmployeeProjectAssociation[]
  forms               Form[]
  submissions         Submission[]
  reports             Report[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, organizationId])
}

enum TeamType {
  TEXT
  AUDIO
  VIDEO
}

// Team or Department
model Team {
  id     String   @id @default(cuid())
  name   String   @unique
  alias  String?
  type   TeamType @default(TEXT)
  userId String
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, organizationId])
}

model Invite {
  id             String       @id @default(uuid())
  token          String
  email          String
  inviteCode     String?
  role           EmployeeRole @default(MEMBER)
  expirationDate DateTime

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Invite")
}

model Project {
  id               String   @id @default(uuid())
  name             String
  description      String
  expectedDuration String
  status           String
  isCompleted      Boolean  @default(false)
  startDate        DateTime
  endDate          DateTime

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  forms       Form[]
  submissions Submission[]
  reports     Report[]

  projectAssociations EmployeeProjectAssociation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([organizationId])
}

model EmployeeProjectAssociation {
  id String @id @default(uuid())

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  role String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([employeeId, projectId])
}

model Form {
  id          String @id @default(uuid())
  title       String
  formData    String
  description String

  creatorId String
  employee  Employee @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  submissions Submission[]
  reports     Report[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId, creatorId, organizationId])
}

model Submission {
  id             String @id @default(uuid())
  title          String
  description    String
  submissionData String
  geolocation    String

  creatorId String
  employee  Employee @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  formId    String
  form      Form    @relation(fields: [formId], references: [id], onDelete: Cascade)
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  reports Report[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([formId, projectId, creatorId, organizationId])
}

model Report {
  id         String @id @default(uuid())
  title      String
  reportData String

  creatorId      String
  employee       Employee     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  formId         String
  form           Form         @relation(fields: [formId], references: [id])
  submissionId   String
  submission     Submission   @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  projectId      String
  project        Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([formId, projectId, creatorId, submissionId, organizationId])
}
