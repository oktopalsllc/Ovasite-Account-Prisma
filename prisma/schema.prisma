generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                 String         @id @default(cuid())
  email              String         @unique
  password           String
  role               UserRole       @default(USER)
  source             Source         @default(OTHER)
  passwordResetToken String?
  passwordResetAt    DateTime?
  refreshToken       String?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  employees          Employee[]
  organizations      Organization[]
}

model Subscription {
  id                  String  @id @default(cuid())
  name                String  @unique
  slug                String  @db.Text
  numberOfOrgs        String  @db.Text
  numberOfEmployees   String  @db.Text
  numberOfProjects    String  @db.Text
  numberOfForms       String  @db.Text
  numberOfSubmissions String  @db.Text
  offlineSubmission   Boolean @default(true)
  price               Price?
}

model Price {
  id             String       @id @default(cuid())
  amount         Int
  testId         String?
  productionId   String?      @db.Text
  subscriptionId String       @unique
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
}

model Organization {
  id                     String       @id @default(cuid())
  name                   String       @unique
  logo                   String?
  address                String?
  inviteCode             String       @unique
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt
  stripeCustomerId       String?      @unique @map("stripe_customer_id")
  stripeSubscriptionId   String?      @unique @map("stripe_subscription_id")
  stripePriceId          String?      @map("stripe_price_id") @db.Text
  stripeCurrentPeriodEnd DateTime?    @map("stripe_current_period_end")
  userId                 String
  employees              Employee[]
  forms                  Form[]
  invite                 Invite[]
  projects               Project[]
  reports                Report[]
  submissions            Submission[]
  user                   User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, name])
}

model Employee {
  id                  String                       @id @default(cuid())
  fullName            String?
  email               String?
  contactNumber       String?                      @db.Text
  address             String?
  avatar              String?
  role                EmployeeRole                 @default(MEMBER)
  userId              String
  organizationId      String
  createdAt           DateTime                     @default(now())
  updatedAt           DateTime                     @updatedAt
  organization        Organization                 @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user                User                         @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectAssociations EmployeeProjectAssociation[]
  projects            Project[]
  forms               Form[]
  reports             Report[]
  submissions         Submission[]
  invite              Invite[]

  @@index([userId])
  @@index([organizationId])
}

model Invite {
  id             String       @id @default(cuid())
  token          String
  email          String
  inviteCode     String?
  role           EmployeeRole @default(MEMBER)
  expirationDate DateTime
  organizationId String
  employeeId     String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  employee       Employee     @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([employeeId])
  @@map("Invite")
}

model Project {
  id                  String                       @id @default(cuid())
  name                String                       @db.Text
  image               String?
  description         String                       @db.Text
  expectedDuration    String                       @db.Text
  status              String                       @db.Text
  isCompleted         Boolean                      @default(false)
  startDate           DateTime
  endDate             DateTime
  creatorId           String?
  organizationId      String
  createdAt           DateTime                     @default(now())
  updatedAt           DateTime                     @updatedAt
  projectAssociations EmployeeProjectAssociation[]
  forms               Form[]
  creator             Employee?                    @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  organization        Organization                 @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  reports             Report[]
  submissions         Submission[]

  @@index([organizationId])
  @@index([creatorId])
}

model EmployeeProjectAssociation {
  id         String      @id @default(cuid())
  employeeId String
  projectId  String
  role       ProjectRole @default(FIELD_AGENT)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  employee   Employee    @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  project    Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([employeeId])
  @@index([projectId])
}

model Form {
  id             String       @id @default(cuid())
  title          String
  formData       String       @default("[]")
  description    String       @default("")
  published      Boolean      @default(false)
  closed         Boolean      @default(false)
  visits         Int          @default(0)
  subCount       Int          @default(0)
  creatorId      String
  organizationId String
  projectId      String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  employee       Employee     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  project        Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  submissions    Submission[]

  @@index([projectId])
  @@index([creatorId])
  @@index([organizationId])
}

model Submission {
  id             String       @id @default(cuid())
  title          String       @db.Text
  description    String       @db.Text
  submissionData String       @db.Text
  geolocation    String?      @db.Text
  formData       String?      @db.Text
  creatorId      String
  organizationId String
  formId         String
  projectId      String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  employee       Employee     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  form           Form         @relation(fields: [formId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  project        Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([formId])
  @@index([creatorId])
  @@index([organizationId])
  @@index([projectId])
}

model Report {
  id             String       @id @default(cuid())
  title          String       @db.Text
  reportData     String       @db.Text
  creatorId      String
  organizationId String
  projectId      String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  employee       Employee     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  project        Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([creatorId])
  @@index([organizationId])
}

model Audit {
  id        String   @id @default(cuid())
  userMail  String   @db.Text
  ipAddress String?  @db.Text
  orgId     String   @db.Text
  type      String   @db.Text
  tableName String   @db.Text
  dateTime  DateTime @default(now())
  oldValues String   @db.Text
  newValues String   @db.Text
  rowId     String   @db.Text
}

model Feedback {
  id        String   @id @default(cuid())
  name      String
  email     String
  rating    String?
  title     String
  comment   String
  createdAt DateTime @default(now())
}

enum EmployeeRole {
  OWNER
  ADMIN
  MEMBER
  GUEST
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum Source {
  OTHER
  FACEBOOK
  TWITTER
  INSTAGRAM
  LINKEDIN
  GOOGLE
  FRIEND
}

enum ProjectRole {
  SUPERVISOR
  FIELD_AGENT
  GUEST
  MANAGER
}
